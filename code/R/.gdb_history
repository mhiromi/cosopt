r
break cosopt
r
n
print microarray
b
r
.C("cosopt",matrix(c(1,2,3,4),nrow=2,ncol=2))
dyn.load("cosopt.so")
.C("cosopt",matrix(c(1,2,3,4),nrow=2,ncol=2))
r
n
b cosopt
dyn.load("cosopt.so")
.C("cosopt",matrix(c(1,2,3,4),nrow=2,ncol=2))
r
print microarray
print ncols(microarray);
print ncols(microarray)
print dim(microarray)
b cosopt
r
n
print gene_num
print sample_num
n
print gene_num
print sample_num
print dim(microarray)
dyn.load("cosopt.so")
.Call("cosopt",matrix(c(1,2,3,4),nrow=2,ncol=2))
b cosopt
r
n
print mdims
print mdims[0]
print mdims[1]
n
b cosopt
r
n
print mdims
print mdims[0]
print mdims[1]
r
b cosopt
r
n
q
b cosopt
dyn.load("cosopt.so")
dyn.load("cosopt.so")
r
n
print test_cosine
p test_cosine
n
n
print sample_num
n
n
b
b cosopt
r
b 240
n
print mrow
print *mrow
print *mcol
print *ans
print ans
n
b cosopt
b cosopt
r
n
print microarray
print microarray[1]
print microarray[2]
print microarray[3]
print microarray[4]
n
print size
print x
print x[0]
b calculate_minimum_SSR
r
print samples
print samples[0]
n
print surr_distance
n
print rsn
n
j
help
help runnning
help running
help running
help
help internals
help next
help c
help step
s
help j
n
b calculate_minimum_SSR
r
n
print rsn
n
print rsn
p samples[l].sample
n
print a
print b
n
print distance
n
print a
print b
n
print b
print a
n
print a
print b
n
print b
print rsn
n
print surr_sd
n
b calculate_SSR
r
n
print a
print b
n
print test_cosine[0]
print test_cosine[1]
print test_cosine[2]
print test_cosine[3]
print test_cosine[]
print test_cosine[5]
print test_cosine[6]
print test_cosine[7]
print test_cosine[8]
print test_cosine[9]
print test_cosine[0]
n
b calculate_SSR
r
n
print x[i]
print x[1]
print x[0]
print x[4]
print x[5]
print x[6]
print x[7]
n
print i
print size
n
print size
n
print size
n
y[i]
y[1]
y[0]
n
y[0]
print y[0]
print 
n
break calculate_SSR
r
n
print distance
n
print distance
print y[i]
print y[1]
print x[1]
print distance
n
print distance
n
print distance
n
print distance
n
print distance
n
print distance
n
print distance
n
print distance
n
print distance
n
print distance
n
n
n
print distance
n
print distance
n
print distance
n
print y[i]
print y[1]
print y[0]
print x[0]
print a
print b
n
print b
